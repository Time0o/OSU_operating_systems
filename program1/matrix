#!/bin/bash

progname=$(basename $0)

error() {
    >&2 echo "$progname: error: $1"
    exit 1
}

usage_error() {
    >&2 echo "Usage: $progname: [dims|transpose|mean|add|multiply] [ARGS]"
    exit 1
}

assert_readable() {
    [ ! -r "$1" ] && error "file $1 not readable"
}

parse_matrix() {
    matrix=()
    numrows=0
    numcols=0

    lineno=1
    while read line; do
        # file location to display on parsing error
        loc="line $lineno of $1"

        # skip empty lines
        if [[ ! "$line" =~ ^[[:space:]]*$ ]]; then
            # read in next matrix row
            row=()

            if [[ "$line" =~ ^[[:space:]]*(-?[1-9][0-9]*[[:space:]]*)*$ ]]; then
                for entry in ${BASH_REMATCH[0]}; do
                    row+=($entry)
                done
            else
                error "malformed matrix row in line $loc"
            fi

            # validate number of columns in row
            _numcols=${#row[@]}

            if [ $lineno -eq 1 ]; then
                numcols=$_numcols
            elif [ $_numcols -ne $numcols ]; then
                err="invalid row dimension in $loc"
                err="$err (expected $numcols but got $_numcols)"

                error "$err"
            fi

            # append row to matrix
            matrix+=(${row[@]})

            ((++numrows))
        fi

        ((++lineno))
    done < "${1:-/dev/stdin}"
}

print_matrix() {
    # determine 'widest' number in matrix
    padding=0
    for ((i = 0; i < $((numrows * numcols)); ++i)); do
        _padding=${#matrix[i]}
        [ $_padding -gt $padding ] && padding=$_padding
    done

    # print matrix row by row
    for ((r = 0; r < $numrows; ++r)); do
        row="${matrix[@]:$((r * numcols)):$numcols}"

        # print with cell padding and strip trailing whitespace
        printf "%${padding}s " $row | sed -e 's/[[:space:]]*$//'
        printf "\n"
    done
}

dims() {
    parse_matrix "$1"

    echo "$numrows $numcols"
}

transpose() {
    parse_matrix "$1"

    for ((r = 0; r < $numrows; ++r)); do
        for ((c = 0; c < $numcols; ++c)); do
            [ $c -eq $r ] && continue

            i1=$((r * numcols + c))
            i2=$((c * numcols + r))

            tmp=${matrix[$i1]}

            matrix[$i1]=${matrix[$i2]}
            matrix[$i2]=$tmp
        done
    done

    print_matrix
}

# validate command line arguments
[ $# -eq 0 ] && usage_error

case "$1" in
    "dims" | "transpose" | "mean")
        [ $# -gt 2 ] && usage_error
        [ $# -eq 2 ] && assert_readable "$2"
        ;;
    "add" | "multiply")
        [ $# -ne 3 ] && usage_error
        assert_readable "$2"
        assert_readable "$3"
        ;;
    *)
        error "unknown operation: $1"
esac

# execute operation
$1 "${@:2}"
